{"version":3,"sources":["images/logo.png","styles/global.js","pages/Home/styles.js","pages/Home/index.js","App.js","index.js"],"names":["module","exports","createGlobalStyle","Wrapper","styled","div","Logo","img","Card","Templates","Form","form","Button","button","Preview","Home","useState","templates","setTemplates","selectedTemplate","setSelectedTemplate","boxes","setBoxes","generetadMeme","setGeneratedMeme","handleInputChange","index","e","newValues","target","value","a","preventDefault","params","qs","stringify","template_id","id","username","process","REACT_APP_IMGFLIP_USERNAME","password","REACT_APP_IMGFLIP_PASSWORD","map","text","fetch","response","json","url","data","blob","download","name","useEffect","memes","src","LogoImage","alt","type","onClick","handleDownloadImage","style","margin","handleReset","template","key","handleSelectedTemplate","className","onSubmit","handleSubmit","Array","box_count","fill","_","String","Math","random","placeholder","onChange","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32b8b682.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.471f8771.png\";","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n  }\n\n  body {\n    background: #EEEEEE;\n  }\n\n  button,\n  input {\n    outline: 0;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  ::-webkit-scrollbar {\n    width: 9px;\n    height: 9px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #E1E1E1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #D72D2F;\n    border-radius: 8px;\n  }\n\n`","import styled from 'styled-components';\n\nexport const Wrapper = styled.div `\n    width: 100%;\n    height: 100%;\n    margin: 30px 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const Logo = styled.img `\n    width: 160px;\n    height: auto;\n    margin-bottom: 20px;\n`;\n\nexport const Card = styled.div `\n    background: #FFFFFF;\n    width: 550px;\n    border-radius: 8px;\n    padding: 20px;\n    margin-top: 15px;\n    box-shadow: 0 6px 10px 0 rgba(0, 0, 0, .2);\n\n    h2 {\n        font-size: 20px;\n        color: #26333D;\n        margin-bottom: 10px;\n    }\n`\n\nexport const Templates = styled.div `\n    width: 100%;\n    height: 90px;\n    background: #eee;\n    border-radius: 8px;\n    overflow-x: auto;\n    display: flex;\n    align-items: center;\n    padding: 0 15px;\n    margin-bottom: 30px;\n\n    button {\n        border: 0;\n        background: transparent;\n        margin-right: 10px;\n\n        img {\n            width: 53px;\n            height: 53px;\n        }\n\n        &.selected {\n            border: 2px solid #CB3234;\n        }\n    }\n`;\n\nexport const Form = styled.form`\n    input {\n        width: 100%;\n        height: 40px;\n        border-radius: 8px;\n        border: 1px solid #dbdbdb;\n        padding: 0 15px;\n        font-size: 14px;\n        margin-bottom: 10px;\n    }\n\n`;\n\nexport const Button = styled.button`\n    width: 100%;\n    height: 40px;\n    border-radius: 8px;\n    border: 0;\n    background: #CB3234;\n    color: #FFFFFF;\n    text-transform: uppercase;\n    font-size: 13px;\n    letter-spacing: .08em;\n    font-weight: bold;\n    transition: background-color .3s ease-in;\n\n    &:hover {\n        background: #E16364;\n    }\n`;\n\nexport const Preview = styled.div`\n    width: 510px;\n    border-radius: 8px;\n    margin-bottom: 10px;\n    h3 {\n        font-size: 20px;\n        color: #26333D;\n        margin-bottom: 10px;\n    }\n    img {\n        width: 510px;\n        max-height: 450px;\n    }\n`","import React, { useState, useEffect } from 'react';\nimport qs from 'qs';\nimport download from 'downloadjs';\n\nimport { Wrapper, Logo, Card, Templates, Form, Button, Preview } from './styles';\nimport LogoImage from '../../images/logo.png';\n\nexport default function Home() {\n\n    const [templates, setTemplates] = useState([]);\n    const [selectedTemplate, setSelectedTemplate] = useState(null);\n    const [ boxes, setBoxes ] = useState([]);\n    const [ generetadMeme, setGeneratedMeme] = useState(null);\n\n    //currying -> função que retorna outra função\n    const handleInputChange = (index) => (e) => {\n        const newValues = boxes;\n        newValues[index] = e.target.value;\n        setBoxes(newValues);\n    };\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        const params = qs.stringify({\n            template_id: selectedTemplate.id,\n            username: `${process.env.REACT_APP_IMGFLIP_USERNAME}`,\n            password: `${process.env.REACT_APP_IMGFLIP_PASSWORD}`,\n            boxes: boxes.map(text => ({ text })),\n        });\n\n        const response = await fetch(`https://api.imgflip.com/caption_image?${params}`);\n\n        const { data: { url }} = await response.json();\n\n        setGeneratedMeme(url);\n    };\n\n    function handleSelectedTemplate(template) {\n        setSelectedTemplate(template);\n        setBoxes([]);\n    }\n\n    function handleReset(e) {\n        e.preventDefault();\n        setSelectedTemplate(null);\n        setBoxes([]);\n        setGeneratedMeme(null);\n    }\n\n    async function handleDownloadImage(e) {\n        e.preventDefault();\n        const response = await fetch(generetadMeme);\n        const blob = await response.blob();\n        download(blob, `${selectedTemplate.name}.jpg`);\n    }\n\n    useEffect(() => {\n        (async () => {\n            const response = await fetch('https://api.imgflip.com/get_memes');\n            const { data: { memes } } = await response.json();\n            setTemplates(memes);\n        })();\n    },[])\n\n    return (\n        <Wrapper>\n            <Logo src={LogoImage} />\n            <Card>\n                {generetadMeme && (\n                    <>\n                        <img src={generetadMeme} alt=\"Generated meme\"/>\n                        <Button \n                            type=\"submit\" \n                            onClick={e => handleDownloadImage(e)}\n                            style={{ margin: '10px 0'}}\n                        >\n                            Baixar meme\n                        </Button>\n                        <Button \n                            type=\"submit\" \n                            onClick={e => handleReset(e)}\n                        >\n                            Criar outro meme\n                        </Button>\n                    </>\n                )}\n                {!generetadMeme && (\n                    <>\n                        <h2>Selecione um template</h2>\n                        <Templates>\n                            {templates.map(template => (\n                                <button\n                                    key={template.id}\n                                    type='button'\n                                    onClick={e => handleSelectedTemplate(template)}\n                                    className={template.id === selectedTemplate?.id ? 'selected' : ''}\n                                >\n                                    <img src={template.url} alt={template.name} />\n                                </button>\n                            ))}\n                        </Templates>\n\n                        {selectedTemplate &&\n                            <Preview>\n                                <h3>Preview do meme</h3>\n                                <img src={selectedTemplate.url} alt={selectedTemplate.name}/>\n                            </Preview>\n                        }\n        \n                        {selectedTemplate && \n                            <>\n                            <h2>Textos</h2>\n                            <Form onSubmit={e => handleSubmit(e)}>\n                                {(new Array(selectedTemplate.box_count).fill('').map((_, index) => (\n                                    <input \n                                        key={String(Math.random())}\n                                        placeholder={`Texto ${index + 1}`} \n                                        onChange={handleInputChange(index)}\n                                    />\n                                )))}\n        \n                                <Button type=\"submit\">GeneretaMyMeme</Button>\n                            </Form>\n                            </>\n                        }\n                    </>\n                )}\n            </Card>\n        </Wrapper>\n    );\n}","import React from 'react';\n\nimport GlobalStyles from './styles/global';\nimport Home from './pages/Home';\n\nexport default function App() {\n  return (\n    <>\n    <GlobalStyles/>\n    <Home/>\n    </>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root'));\n"],"sourceRoot":""}